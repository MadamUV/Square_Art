// Copyright (c) 2009-2012 Turbulenz Limited

#include "platform.cgh"

//
// Uniform variables
//
float4 clipSpace;
float2 copyUVScale;
float copyFlip;

TZ_TEXTURE2D_DECLARE(texture)
{
    MinFilter = LinearMipMapNearest;
    MagFilter = Linear;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
};

TZ_TEXTURE2D_DECLARE(npottexture)
{
    MinFilter = Nearest;
    MagFilter = Linear;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
};

TZ_TEXTURE2D_DECLARE(inputTexture0)
{
    MinFilter = Nearest;
    MagFilter = Linear;
    WrapS = ClampToEdge;
    WrapT = ClampToEdge;
};

//
// Vertex Programs
//

void vp_draw2D(in float2 INPosition : POSITION,
               in float4 INColor : COLOR,
               in float2 INTexCoord0 : TEXCOORD0,
               out float4 OUTPosition : TZ_OUT_POSITION,
               out float4 OUTColor : COLOR,
               out float2 OUTTexCoord0 : TEXCOORD0)
{
    float2 position = INPosition * clipSpace.xy + clipSpace.zw;
    OUTPosition.x = position.x;
    OUTPosition.y = position.y;
    OUTPosition.z = 0.0;
    OUTPosition.w = 1.0;
    OUTColor     = INColor;
    OUTTexCoord0 = INTexCoord0;
}

void vp_copy(in float4 InPosition : POSITION,
             in float2 InUV : TEXCOORD0,
             out float4 OutPosition : TZ_OUT_POSITION,
             out float2 OutUV : TEXCOORD0)
{
    OutPosition.x = InPosition.x;
    OutPosition.y = InPosition.y * copyFlip;
    OutPosition.zw = InPosition.zw;
    OutUV = InUV * copyUVScale;
}

//
// Pixel Programs
//

float4 fp_draw2D(float4 INColor : COLOR, float2 INTexCoord0 : TEXCOORD0) : TZ_OUT_COLOR
{
    return INColor * TZ_TEX2D(texture, INTexCoord0);
}

float4 fp_draw2D_nomips(float4 INColor : COLOR, float2 INTexCoord0 : TEXCOORD0) : TZ_OUT_COLOR
{
    return INColor * TZ_TEX2D(npottexture, INTexCoord0);
}

float4 fp_copy(float2 UV: TEXCOORD0) : TZ_OUT_COLOR
{
    return TZ_TEX2D(inputTexture0, UV);
}

//
// Techniques
//
technique opaque
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = false;
        VertexProgram   = compile latest vp_draw2D();
        FragmentProgram = compile latest fp_draw2D();
    }
}

technique opaquenomip
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = false;
        VertexProgram   = compile latest vp_draw2D();
        FragmentProgram = compile latest fp_draw2D_nomips();
    }
}

technique alpha
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = true;
        BlendFunc       = int2(SrcAlpha, OneMinusSrcAlpha);
        VertexProgram   = compile latest vp_draw2D();
        FragmentProgram = compile latest fp_draw2D();
    }
}

technique alphanomip
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = true;
        BlendFunc       = int2(SrcAlpha, OneMinusSrcAlpha);
        VertexProgram   = compile latest vp_draw2D();
        FragmentProgram = compile latest fp_draw2D_nomips();
    }
}

technique additive
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = true;
        BlendFunc       = int2(SrcAlpha, One);
        VertexProgram   = compile latest vp_draw2D();
        FragmentProgram = compile latest fp_draw2D();
    }
}

technique additivenomip
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = true;
        BlendFunc       = int2(SrcAlpha, One);
        VertexProgram   = compile latest vp_draw2D();
        FragmentProgram = compile latest fp_draw2D_nomips();
    }
}

technique copy
{
    pass
    {
        DepthTestEnable = false;
        DepthMask       = false;
        CullFaceEnable  = false;
        BlendEnable     = false;
        VertexProgram   = compile latest vp_copy();
        FragmentProgram = compile latest fp_copy();
    }
}
