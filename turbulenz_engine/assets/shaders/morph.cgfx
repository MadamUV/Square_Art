// Copyright (c) 2010-2013 Turbulenz Limited

#include "platform.cgh"

#define MAX_MORPH_WEIGHTS 3

//
// Uniform variables
//
float4x4 worldViewProjection;

float3 eyePosition; // in local space

float morphWeights[MAX_MORPH_WEIGHTS];
float4 materialColor = {1.0, 1.0, 1.0, 1.0};

float3 lightPosition; // in local space
float3 lightColor;
float3 ambientColor;

static const float Ks = 0.5;
static const float Kr = 0.5;
static const float SpecularExponent = 32.0;

TZ_TEXTURE2D_DECLARE(diffuse)
{
    MinFilter = LinearMipMapNearest;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
    MaxAnisotropy = 16;
};


//
// Programs
//
float4 PointToDevice(float3 pt, float4x4 transform)
{
    return pt.xxxx * transform[0] +
           pt.yyyy * transform[1] +
           pt.zzzz * transform[2] +
                     transform[3];
}

void blinn_shading(float3 LightColor,
                   float3 Nn,
                   float3 Ln,
                   float3 Vn,
                   out float3 DiffuseContrib,
                   out float3 SpecularContrib)
{
    float3 Hn = normalize(Vn + Ln);
    float d = saturate(dot(Ln, Nn));
    float s = pow(saturate(dot(Hn, Nn)), SpecularExponent);
    DiffuseContrib = d * LightColor;
    SpecularContrib = float(d > 0.0f) * s * Ks * LightColor;
}

void vp_morph(in float3 INPosition0 : ATTR0,
              in float3 INNormal0   : ATTR2,
              in float3 INPosition1 : ATTR10,
              in float3 INNormal1   : ATTR11,
              in float3 INPosition2 : ATTR12,
              in float3 INNormal2   : ATTR13,
              in float3 INPosition3 : ATTR14,
              in float3 INNormal3   : ATTR15,
              in float2 INUV        : ATTR8,
              out float4 OUTPosition : TZ_OUT_POSITION,
              out float4 OUTColor    : COLOR)
{
    float3 morphPosition = INPosition0;
    float3 morphNormal = INNormal0;

    morphPosition += (INPosition1 - INPosition0) * morphWeights[0];
    morphPosition += (INPosition2 - INPosition0) * morphWeights[1];
    morphPosition += (INPosition3 - INPosition0) * morphWeights[2];

    morphNormal += (INNormal1 - INNormal0) * morphWeights[0];
    morphNormal += (INNormal2 - INNormal0) * morphWeights[1];
    morphNormal += (INNormal3 - INNormal0) * morphWeights[2];

    morphNormal = normalize(morphNormal.xyz);

    OUTPosition = PointToDevice(morphPosition, worldViewProjection);
    float3 lv = normalize(lightPosition - morphPosition);
    float3 color = (saturate(dot(morphNormal, lv)) * lightColor + ambientColor);
    OUTColor = float4(color * materialColor.xyz, materialColor.w);
}

float4 fp_morph(float4 INColor : COLOR) : TZ_OUT_COLOR
{
    return INColor;
}

void vp_normals_morph(in float3 INPosition0 : ATTR0,
                      in float3 INNormal0   : ATTR2,
                      in float3 INPosition1 : ATTR10,
                      in float3 INNormal1   : ATTR11,
                      in float3 INPosition2 : ATTR12,
                      in float3 INNormal2   : ATTR13,
                      in float3 INPosition3 : ATTR14,
                      in float3 INNormal3   : ATTR15,
                      in float2 INUV        : ATTR8,
                      out float4 OUTPosition : TZ_OUT_POSITION,
                      out float3 OUTNormal   : TEXCOORD0)
{
    float3 morphPosition = INPosition0;
    float3 morphNormal = INNormal0;

    morphPosition += (INPosition1 - INPosition0) * morphWeights[0];
    morphPosition += (INPosition2 - INPosition0) * morphWeights[1];
    morphPosition += (INPosition3 - INPosition0) * morphWeights[2];

    morphNormal += (INNormal1 - INNormal0) * morphWeights[0];
    morphNormal += (INNormal2 - INNormal0) * morphWeights[1];
    morphNormal += (INNormal3 - INNormal0) * morphWeights[2];

    morphNormal = normalize(morphNormal.xyz);

    OUTPosition = PointToDevice(morphPosition, worldViewProjection);
    OUTNormal = morphNormal;
}

float4 fp_normals(float3 normal : TEXCOORD0) : TZ_OUT_COLOR
{
    float3 Nn = normalize(normal);
    return float4(Nn * 0.5 + 0.5, 1.0);
}

void vp_blinn_morph(in float3 INPosition0 : ATTR0,
                    in float3 INNormal0   : ATTR2,
                    in float3 INPosition1 : ATTR10,
                    in float3 INNormal1   : ATTR11,
                    in float3 INPosition2 : ATTR12,
                    in float3 INNormal2   : ATTR13,
                    in float3 INPosition3 : ATTR14,
                    in float3 INNormal3   : ATTR15,
                    in float2 INUV        : ATTR8,
                    out float4 OUTPosition : TZ_OUT_POSITION,
                    out float4 OUTColor    : COLOR,
                    out float2 OUTUV       : TEXCOORD0,
                    out float3 OUTNormal   : TEXCOORD1,
                    out float3 OUTLight    : TEXCOORD2,
                    out float3 OUTView     : TEXCOORD3)
{
    float3 morphPosition = INPosition0;
    float3 morphNormal = INNormal0;

    morphPosition += (INPosition1 - INPosition0) * morphWeights[0];
    morphPosition += (INPosition2 - INPosition0) * morphWeights[1];
    morphPosition += (INPosition3 - INPosition0) * morphWeights[2];

    morphNormal += (INNormal1 - INNormal0) * morphWeights[0];
    morphNormal += (INNormal2 - INNormal0) * morphWeights[1];
    morphNormal += (INNormal3 - INNormal0) * morphWeights[2];

    morphNormal = normalize(morphNormal.xyz);

    OUTPosition = PointToDevice(morphPosition, worldViewProjection);
    OUTColor = materialColor;
    OUTUV = INUV;
    OUTNormal = morphNormal;
    OUTLight = normalize(lightPosition - morphPosition);
    OUTView  = normalize(eyePosition - morphPosition);
}

float4 fp_blinn(in float4 INColor    : COLOR,
                in float2 INUV       : TEXCOORD0,
                in float3 INNormal   : TEXCOORD1,
                in float3 INLight    : TEXCOORD2,
                in float3 INView     : TEXCOORD3) : TZ_OUT_COLOR
{
    float3 diffContrib;
    float3 specContrib;
    float3 Nn = normalize(INNormal);
    float3 Ln = normalize(INLight);
    float3 Vn = normalize(INView);
    blinn_shading(lightColor, Nn, Ln, Vn, diffContrib, specContrib);
    float4 diffuseColor = INColor * TZ_TEX2D(diffuse, INUV);
    float3 result = specContrib + (diffuseColor.xyz * (diffContrib + ambientColor));
    return float4(result, diffuseColor.w);
}

//
// Techniques
//
technique morph
{
    pass p0
    {
        DepthTestEnable = true;
        DepthFunc       = LEqual;
        DepthMask       = true;
        CullFaceEnable  = true;
        CullFace        = Back;
        BlendEnable     = false;

        VertexProgram   = compile latest vp_morph();
        FragmentProgram = compile latest fp_morph();
    }
}

technique debug_normals_morph
{
    pass p0
    {
        DepthTestEnable = true;
        DepthFunc       = LEqual;
        DepthMask       = true;
        CullFaceEnable  = true;
        CullFace        = Back;
        BlendEnable     = false;

        VertexProgram   = compile latest vp_normals_morph();
        FragmentProgram = compile latest fp_normals();
    }
}

technique blinn_morph
{
    pass p0
    {
        DepthTestEnable = true;
        DepthFunc       = LEqual;
        DepthMask       = true;
        CullFaceEnable  = true;
        CullFace        = Back;
        BlendEnable     = false;

        VertexProgram   = compile latest vp_blinn_morph();
        FragmentProgram = compile latest fp_blinn();
    }
}
